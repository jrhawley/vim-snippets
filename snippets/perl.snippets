# #!/usr/bin/perl
snippet #!
	#!/usr/bin/perl
	#!/.mounts/labs/boutroslab/private/Software/NightlyBuild_current/perl
# Hash Pointer
snippet .
	 =>
# Function
snippet sub
	### ${1:FUNCTION_NAME} ###########################################################################
	# Description:
	#	${2:DESCRIPTION}
	# Input Variables:
	#	${3:input variable names, descriptions}
	# Output Variables:
	#	${4:output variable names, descriptions}

	sub $1 {
		${5:code}
		return ${6:0};
		}

# Function with multiple args
snippet subx
	### ${1:FUNCTION_NAME} ###########################################################################
	# Description:
	#	${2:DESCRIPTION}
	# Input Variables:
	#	${3:input variable names, descriptions}
	# Output Variables:
	#	${4:output variable names, descriptions}
	sub $1 {
		my %args = (
			${3:argument} => undef,
			@
			);

		while( my ($key, $value) = each %args){
			croak "$key must be defined. $!" if !defined $value;
			}

		${4:body}
		}

# Tie array to file
snippet tie
	tie my @${1:array}, 'Tie::File', ${2:$file} or croak "Cannot tie file $2. $!";

# Each
snippet each
	while ( my ($key, $value) = each %${1:hash}) {
		${2:body}
		}

# System
snippet system
		0 == system(${1:command}) or croak "Error in $1. Exit status:$?\n"; 

# Conditional
snippet if
	if (${1}) {
		${2:# body...}
		}
# Conditional if..else
snippet ife
	if (${1}) {
		${2:# body...}
		}
	else {
		${3:# else...}
		}
# Conditional if..elsif..else
snippet ifee
	if (${1}) {
		${2:# body...}
	} elsif (${3}) {
		${4:# elsif...}
	} else {
		${5:# else...}
	}
# Conditional One-line
snippet xif
	${1:expression} if ${2:condition};${3}
# Unless conditional
snippet unless
	unless (${1}) {
		${2:# body...}
		}
# Unless conditional One-line
snippet xunless
	${1:expression} unless ${2:condition};${3}
# Try/Except
snippet eval
	eval {
		${1:# do something risky...}
		};
	if ($@) {
		warn $@;
		${2:# handle failure...}
		}
# While Loop
snippet wh
	while (${1}) {
		${2:# body...}
		}
# While Loop One-line
snippet xwh
	${1:expression} while ${2:condition};${3}
# For Loop
snippet for
	for (my $${2:var} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4:# body...}
		}
# Foreach Loop
snippet fore
	foreach my $${1:x} (@${2:array}) {
		${3:# body...}
		}
# Foreach Loop One-line
snippet xfore
	${1:expression} foreach @${2:array};${3}
# Package
snippet cl
	package ${1:ClassName};
	
	use base qw(${2:ParentClass});
	
	sub new {
		my $class = shift;
		$class = ref $class if ref $class;
		my $self = bless {}, $class;
		$self;
		}
	
	 1;${3}
# Read File
snippet slurp
	my $${1:var};
	{ local $/ = undef; local *FILE; open FILE, "<${2:file}"; $$1 = <FILE>; close FILE }${3}

snippet ##
	`strpart("#",0,100)`

# a fully functional Perl script that does nothing with a help and man page
snippet quickstart
	`strpart("### " . Filename() . ".pl ####################################################################################################", 0, 99)`
	# ${2:Description}

	### HISTORY #######################################################################################
	# Version           Date            Developer           Comments
	# 0.01

	### INCLUDES ######################################################################################
	use warnings;
	use strict;
	use Carp;
	use Getopt::Long;
	use Pod::Usage;
	use POSIX qw(strftime);
	use Cwd;

	use constant DATE => strftime("%C%y-%m-%d", localtime(time()));
	use constant SVN => substr(cwd(),0,index(cwd(),'BoutrosLab')) . 'BoutrosLab/';

	### COMMAND LINE DEFAULT ARGUMENTS ################################################################
	# list of arguments and default values go here as hash key/value pairs
	our %opts = (
		);

	### MAIN CALLER ###################################################################################
	my $result = main();
	exit($result);

	### FUNCTIONS #####################################################################################

	### main ##########################################################################################
	# Description:
	#	Main subroutine for program
	# Input Variables:
	#	%opts = command line arguments
	# Output Variables:
	#	N/A

	sub main {
		# get the command line arguments
		GetOptions(
			\%opts,
			"help|?",
			"man",
			) or pod2usage(64);

		if ($opts{'help'}) { pod2usage(1) };
		if ($opts{'man'}) { pod2usage(-exitstatus => 0, -verbose => 2) };

		while(my ($arg, $value) = each(%opts)) {
			if (!defined $value) {
				print "ERROR: Missing argument $arg\n";
				pod2usage(128);
				}
			}

		return 0;

		}


	__END__

	
	=head1 NAME

	$1

	=head1 SYNOPSIS

	B<$1> [options] [file ...]

		Options:
		--help          brief help message
		--man           full documentation

	=head1 OPTIONS

	=over 8

	=item B<--help>

	Print a brief help message and exit.

	=item B<--man>

	Print the manual page.

	=back

	=head1 DESCRIPTION

	B<$1> $2

	=head1 EXAMPLE

	$1

	=head1 AUTHOR

	${3:username} -- Boutros Lab
	
	The Ontario Institute for Cancer Research

	=head1 SEE ALSO

	=cut


# main function for a basic Perl script
snippet main
	### main ##########################################################################################
	# Description:
	#	Main subroutine for program
	# Input Variables:
	#	${1:inputVariables}
	# Output Variables:
	#	${2:n/a}

	sub main {
		# get the command line arguments
		GetOptions(
			\%opts,
			"help|?",
			"man",
			) or pod2usage(64);
		
		pod2usage(1) if $opts{'help'};
		pod2usage(-exitstatus => 0, -verbose => 2) if $opts{'man'};

		while(my ($arg, $value) = each(%opts)) {
			if (!defined $value) {
				print "ERROR: Missing argument $arg\n";
				pod2usage(128);
				}
			}

		return 0;

		}



	__END__

snippet getset
	=item $obj->${1:name}()

	Get/set the $1.

	=cut
	sub $1 {
		my $self = shift;
		if (@_) {
			$self->{${2:NAME}} = shift;
			}
		return $self->{$2};
		}

snippet subcomment
	### subc ##########################################################################################
	# Description:
	#	${3:description of subroutine}
	# Input Variables:
	#	${2:inputVariables}
	# Output Variables:
	#	${3:n/a}

snippet preamble
	### PREAMBLE ######################################################################################
	#
	#

snippet history
	### HISTORY #######################################################################################
	# Version               Date                Coder           Comments
	# ${1:0.01} 

snippet includes
	### INCLUDES ######################################################################################
	use strict;
	use warnings
	use Switch;
	use Cwd;
	use Carp;
	use Data::Dumper;

snippet poditem
	=item ${1:item}

	${2:description}

	=cut

snippet method
	=item $obj->${1:methodName}()

	${2:description}

	=cut
	sub $1 {
		my $self = shift;

		${3:method}

		}

# read and process a file line by line
snippet readlines
	open(my $${1:fh_input}, '<', $${2:input_file}) or croak "Cannot open file $$2: $!";
	while(my $line = <$$1>) {
		$line =~ s/^\s+//;
		$line =~ s/\s+$//;
		${3:code for processing line goes here}
		}
	close($$1);

# strip leading and trailing whitespace
snippet strip
	$${1:line} =~ s/^\s+//;
	$$1 =~ s/\s+$//;

# POD template
snippet pod
	=head1 NAME

	${1:programName}

	=head1 SYNOPSIS

	B<$1> [options] [file ...]

		Options:
		--help			brief help message
		--man			full documentation

	=head1 OPTIONS

	=over 8

	=item B<--help>

	Print a brief help message and exit.

	=item B<--man>

	Print the manual page.

	=back

	=head1 DESCRIPTION

	B<$1> ${2:description of application goes here}

	=head1 EXAMPLE

	=head1 AUTHOR

	${3:username} -- Boutros Lab
	
	The Ontario Institute for Cancer Research

	=head1 SEE ALSO

	=cut

# create a Perl module
snippet create_module
	### ${1:module.pm} ################################################################################
	# ${2:Description of module}
	
	### HISTORY #######################################################################################
	# Version       Date            Developer           Comments
	# 0.01
	
	### INCLUDES ######################################################################################
	use 5.010000;
	use warnings;
	use strict;
	use Carp;
	use Pod::Usage;
	
	package ${3:packageName};
	
	=head1 NAME
	
		$3
	
	=head1 SYNOPSIS
	
		use $3;
		my $obj = $3->new();
	
	=head1 DESCRIPTION
	
	${4:Description of module}
	
	=cut
	
	use strict;
	use POSIX qw/strftime/;
	use Carp;
	
	require Exporter;
	our @ISA = qw(Exporter);
	our %EXPORT_TAGS = ('all'=>[qw(
	
		)]);
	our @EXPORT_OK = (${EXPORT_TAGS{'all'}});
	our @EXPORT = qw();
	
	our $VERSION = '0.01';
	
	=head1 METHODS
	
	=over 4
	
	=item $obj->new()
	
	Instantiate a new object.
	
	=cut
	
	sub new {
	    my $proto = shift;
	    my $class = ref($proto) || $proto;
	    my %params = @_;
	    
	    my $self = {};
	    bless($self, $class);
	
	    $self->_init(%params);
	    
	    return $self;
		}
	
	
	=item _init()
	
	Internal initialization function.  This is not exported and should not
	be called by the calling application.
	
	=cut
	sub _init {
		my $self = shift;
		my %params = @_;
	
		# process all the parameters
		while (my ($param, $value) = each %params) {
			$self->$param($value);
			}
		}
	
	1;
	
	__END__
	
	=back
	
	=head1 FEEDBACK
	
	Please direct all feedback and bug reports to the author.
	
	=head1 AUTHOR
	
	${5:username} -- Boutros Lab
	
	The Ontario Institute for Cancer Research
	
	=cut

snippet new
	=item new()
	
	Create a new object.
	
	=cut
	sub new {
		my $proto = shift;
		my $class = ref($proto) || $proto;
		my %params = @_;
		
		my $self = {};
		bless($self, $class);
		
		$self->_init(%params);
		
		return $self;
		}

snippet _init
	=item _init()
	
	Initialize a new object.  This is an internal method and should not be exported.
	
	=cut
	sub _init {
		my $self = shift;
		my %params = @_;
		
		}

snippet modulino
	`strpart("### " . Filename() . ".pm ####################################################################################################", 0, 100)`
	# ${1:Description of module}
	
	### HISTORY #######################################################################################
	# Version       Date            Developer           Comments
	# 0.01							${2:Name}
	
	### INCLUDES ######################################################################################
	use warnings;
	use strict;
	use Carp;
	use Pod::Usage;
	use Getopt::Long;
	
	package ${3:packageName};
	
	unless (caller()) {
		my %opts;
		GetOptions(
			\%opts,
			"help|?",
			"man",
			"${4:input=s}",
			) or pod2usage(64);
		if ($opts{'help'}) { pod2usage(1) };
		if ($opts{'man'}) { pod2usage(-exitstatus => 0, -verbose => 2) };
		my $result = main(%opts);
		exit($result);
		}

	sub main {
		
		my %args = (
			$4 => undef,
			@_);

		while(my ($key, $value) = each(%args)) {
			if (!defined $value) {
				print "ERROR: Missing argument $key\n";
				pod2usage(128);
				}
			}

		return 0;
		}

	__END__


	=head1 NAME
	
	$3

	=head1 SYNOPSIS

	$1

	B<> [options]

		Options:
		--help			brief help message
		--man			full documentation

	=head1 OPTIONS

	=over 8

	=item B<--help>

	Print a brief help message and exit.

	=item B<--man>

	Print the manual page.

	=back

	=head1 DESCRIPTION

	B<programName> $3

	=head1 EXAMPLE

	programName

	=head1 AUTHOR

	$2 -- Boutros Lab

	The Ontario Institute for Cancer Research

	=head1 SEE ALSO

	=cut

